syntax = "proto2";

package message;

enum Type {
	// TypeDiscover is sent by the inventory app to discover all devices.
	// Drivers should respond to this using a Register message.
	// It is always broadcasted on the inventory queue.
	discover = 1;
	// TypeRegister is sent by drivers to register devices with the inventory.
	// Drivers using the App framework automatically do this at startup, and
	// in respone to a Discover message. It is broadcasted on startup and
	// unicasted in reply to a discover on the inventory queue.
	register = 2;
	// TypeUnregister will unregister a device from the inventory.
	// A driver may unregister a device if it is removed or otherwise unavailable
	// for commands. A temporary failure should not result in an unregistered
	// device. Drivers using the App framework will automatically unregister
	// all their (current) devices at shutdown. It is always broadcasted on the
	// inventory queue.
	unregister = 3;
	// TypeInventory is used to retrieve an inventory of devices from the
	// inventory app. It results in a InventoryReply from the inventory. Only
	// the inventory should respond to this type of message. It is always
	// broadcasted on the inventory queue.
	inventory = 4;
	// TypeInventoryReply is used by the inventory app to send an inventory
	// of all devices in the network to the requester. It is unicasted to the
	// requester on the inventory queue.
	inventoryReply = 5;
	// TypeCommand is used to send a command to a device. It can be broadcasted
	// or unicasted on the command queue. In case it is unicasted to a specific
	// driver, that driver should always respond. In case of a broadcast, only
	// the driver holding the target device should respond, but a respons is not
	// guaranteed or required.
	command = 6;
	// TypeCommandReply is a respons to a TypeCommand. It relays the success of
	// the command. It is always unicasted directly to the requester on the
	// command queue.
	commandReply = 7;
	// TypeEvent is used by drivers or apps to send events about state changes,
	// sensor changes and/or other events. It is always broadcasted on the
	// event queue.
	event = 8; 
};