// Code generated by protoc-gen-go.
// source: event.proto
// DO NOT EDIT!

package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// EventType is the type of the event.
type EventType int32

const (
	EventType_DriverStateChange    EventType = 1
	EventType_DeviceStateChange    EventType = 2
	EventType_ComponentStateChange EventType = 3
	EventType_ComponentValueChange EventType = 4
)

var EventType_name = map[int32]string{
	1: "DriverStateChange",
	2: "DeviceStateChange",
	3: "ComponentStateChange",
	4: "ComponentValueChange",
}
var EventType_value = map[string]int32{
	"DriverStateChange":    1,
	"DeviceStateChange":    2,
	"ComponentStateChange": 3,
	"ComponentValueChange": 4,
}

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}
func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (x *EventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventType_value, data, "EventType")
	if err != nil {
		return err
	}
	*x = EventType(value)
	return nil
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

// Event is a message used by any app to signal an event
type Event struct {
	Header           *Header    `protobuf:"bytes,1,req,name=Header,json=header" json:"Header,omitempty"`
	ID               *string    `protobuf:"bytes,2,req,name=ID,json=iD" json:"ID,omitempty"`
	SubjectID        *string    `protobuf:"bytes,3,req,name=SubjectID,json=subjectID" json:"SubjectID,omitempty"`
	Event            *EventType `protobuf:"varint,4,req,name=Event,json=event,enum=message.EventType" json:"Event,omitempty"`
	Message          *string    `protobuf:"bytes,5,opt,name=Message,json=message" json:"Message,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Event) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Event) GetID() string {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return ""
}

func (m *Event) GetSubjectID() string {
	if m != nil && m.SubjectID != nil {
		return *m.SubjectID
	}
	return ""
}

func (m *Event) GetEvent() EventType {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return EventType_DriverStateChange
}

func (m *Event) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "message.Event")
	proto.RegisterEnum("message.EventType", EventType_name, EventType_value)
}

func init() { proto.RegisterFile("event.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8e, 0xc1, 0x4a, 0x03, 0x31,
	0x14, 0x45, 0x99, 0xb4, 0xd3, 0x92, 0x57, 0xa9, 0xfa, 0x50, 0x08, 0xe2, 0x22, 0xb8, 0x31, 0xb8,
	0x98, 0x45, 0x7f, 0xa1, 0x11, 0xec, 0xc2, 0x4d, 0x2a, 0xee, 0x63, 0x7d, 0xb4, 0x23, 0x4e, 0x32,
	0x64, 0xd2, 0x01, 0x7f, 0xc7, 0x2f, 0x15, 0x93, 0x4e, 0x69, 0xb7, 0xe7, 0xdc, 0x7b, 0xb9, 0x30,
	0xa3, 0x9e, 0x5c, 0xac, 0xda, 0xe0, 0xa3, 0xc7, 0x69, 0x43, 0x5d, 0x67, 0xb7, 0x74, 0x77, 0xb1,
	0x23, 0xfb, 0x49, 0x21, 0xe3, 0x87, 0xdf, 0x02, 0xca, 0xe7, 0xff, 0x18, 0x3e, 0xc2, 0xe4, 0x25,
	0x19, 0x51, 0x48, 0xa6, 0x66, 0x8b, 0xcb, 0xea, 0xd0, 0xa8, 0x32, 0x36, 0x93, 0x5c, 0xc4, 0x39,
	0xb0, 0x95, 0x16, 0x4c, 0x32, 0xc5, 0x0d, 0xab, 0x35, 0xde, 0x03, 0x5f, 0xef, 0x3f, 0xbe, 0x68,
	0x13, 0x57, 0x5a, 0x8c, 0x12, 0xe6, 0xdd, 0x00, 0x50, 0x1d, 0xf6, 0xc5, 0x58, 0x32, 0x35, 0x5f,
	0xe0, 0x71, 0x35, 0xd1, 0xb7, 0x9f, 0x96, 0x4c, 0x99, 0x7e, 0xa2, 0x80, 0xe9, 0x6b, 0x76, 0xa2,
	0x94, 0x85, 0xe2, 0x66, 0xb8, 0xfc, 0xd4, 0x00, 0x3f, 0xa6, 0xf1, 0x16, 0xae, 0x75, 0xa8, 0x7b,
	0x0a, 0xeb, 0x68, 0x23, 0x2d, 0x77, 0xd6, 0x6d, 0xe9, 0xaa, 0x48, 0x98, 0xfa, 0x7a, 0x43, 0xa7,
	0x98, 0xa1, 0x80, 0x9b, 0xa5, 0x6f, 0x5a, 0xef, 0xc8, 0xc5, 0x53, 0x33, 0x3a, 0x33, 0xef, 0xf6,
	0x7b, 0x3f, 0x98, 0xf1, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xcf, 0xe5, 0x95, 0x38, 0x01,
	0x00, 0x00,
}
