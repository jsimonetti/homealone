// Code generated by protoc-gen-go.
// source: inventory.proto
// DO NOT EDIT!

package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Inventory struct {
	Header           *Header `protobuf:"bytes,1,req,name=Header" json:"Header,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Inventory) Reset()                    { *m = Inventory{} }
func (m *Inventory) String() string            { return proto.CompactTextString(m) }
func (*Inventory) ProtoMessage()               {}
func (*Inventory) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *Inventory) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type InventoryReply struct {
	Header           *Header   `protobuf:"bytes,1,req,name=Header" json:"Header,omitempty"`
	Devices          []*Device `protobuf:"bytes,3,rep,name=Devices" json:"Devices,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *InventoryReply) Reset()                    { *m = InventoryReply{} }
func (m *InventoryReply) String() string            { return proto.CompactTextString(m) }
func (*InventoryReply) ProtoMessage()               {}
func (*InventoryReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *InventoryReply) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *InventoryReply) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func init() {
	proto.RegisterType((*Inventory)(nil), "message.Inventory")
	proto.RegisterType((*InventoryReply)(nil), "message.InventoryReply")
}

func init() { proto.RegisterFile("inventory.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0xcc, 0x2b, 0x4b,
	0xcd, 0x2b, 0xc9, 0x2f, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcf, 0x4d, 0x2d,
	0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0xe2, 0xc9, 0x48, 0x4d, 0x4c, 0x49, 0x2d, 0x82, 0x08, 0x4b, 0xf1,
	0xa4, 0xa4, 0x96, 0x65, 0x26, 0xa7, 0x42, 0x78, 0x4a, 0x26, 0x5c, 0x9c, 0x9e, 0x30, 0x7d, 0x42,
	0xea, 0x5c, 0x6c, 0x1e, 0x60, 0xa5, 0x12, 0x8c, 0x0a, 0x4c, 0x1a, 0xdc, 0x46, 0xfc, 0x7a, 0x50,
	0x23, 0xf4, 0x20, 0xc2, 0x41, 0x50, 0x69, 0xa5, 0x14, 0x2e, 0x3e, 0xb8, 0xae, 0xa0, 0xd4, 0x82,
	0x1c, 0xe2, 0xb5, 0x0a, 0x69, 0x72, 0xb1, 0xbb, 0x80, 0x1d, 0x50, 0x2c, 0xc1, 0xac, 0xc0, 0x8c,
	0xa2, 0x12, 0x22, 0x1e, 0x04, 0x93, 0x07, 0x04, 0x00, 0x00, 0xff, 0xff, 0x70, 0xad, 0x68, 0xa0,
	0xd2, 0x00, 0x00, 0x00,
}
