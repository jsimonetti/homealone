// Code generated by protoc-gen-go.
// source: driver.proto
// DO NOT EDIT!

package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DriverCommand struct {
	Device string `protobuf:"bytes,1,opt,name=Device,json=device" json:"Device,omitempty"`
}

func (m *DriverCommand) Reset()                    { *m = DriverCommand{} }
func (m *DriverCommand) String() string            { return proto.CompactTextString(m) }
func (*DriverCommand) ProtoMessage()               {}
func (*DriverCommand) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *DriverCommand) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

type CommandResult struct {
	Result string `protobuf:"bytes,1,opt,name=Result,json=result" json:"Result,omitempty"`
}

func (m *CommandResult) Reset()                    { *m = CommandResult{} }
func (m *CommandResult) String() string            { return proto.CompactTextString(m) }
func (*CommandResult) ProtoMessage()               {}
func (*CommandResult) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *CommandResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*DriverCommand)(nil), "message.DriverCommand")
	proto.RegisterType((*CommandResult)(nil), "message.CommandResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Driver service

type DriverClient interface {
	Execute(ctx context.Context, in *DriverCommand, opts ...client.CallOption) (*CommandResult, error)
}

type driverClient struct {
	c           client.Client
	serviceName string
}

func NewDriverClient(serviceName string, c client.Client) DriverClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "message"
	}
	return &driverClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *driverClient) Execute(ctx context.Context, in *DriverCommand, opts ...client.CallOption) (*CommandResult, error) {
	req := c.c.NewRequest(c.serviceName, "Driver.Execute", in)
	out := new(CommandResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Driver service

type DriverHandler interface {
	Execute(context.Context, *DriverCommand, *CommandResult) error
}

func RegisterDriverHandler(s server.Server, hdlr DriverHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Driver{hdlr}, opts...))
}

type Driver struct {
	DriverHandler
}

func (h *Driver) Execute(ctx context.Context, in *DriverCommand, out *CommandResult) error {
	return h.DriverHandler.Execute(ctx, in, out)
}

func init() { proto.RegisterFile("driver.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x29, 0xca, 0x2c,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c,
	0x4f, 0x55, 0x52, 0xe7, 0xe2, 0x75, 0x01, 0x4b, 0x38, 0xe7, 0xe7, 0xe6, 0x26, 0xe6, 0xa5, 0x08,
	0x89, 0x71, 0xb1, 0xb9, 0xa4, 0x96, 0x65, 0x26, 0xa7, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06,
	0xb1, 0xa5, 0x80, 0x79, 0x20, 0x85, 0x50, 0x25, 0x41, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x20, 0x85,
	0x10, 0x16, 0x4c, 0x61, 0x11, 0x98, 0x67, 0xe4, 0xca, 0xc5, 0x06, 0x31, 0x51, 0xc8, 0x9a, 0x8b,
	0xdd, 0xb5, 0x22, 0x35, 0xb9, 0xb4, 0x24, 0x55, 0x48, 0x4c, 0x0f, 0x6a, 0xa1, 0x1e, 0x8a, 0x6d,
	0x52, 0x08, 0x71, 0x14, 0xc3, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x0e, 0x35, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x34, 0xf6, 0xf3, 0xc7, 0xb8, 0x00, 0x00, 0x00,
}
